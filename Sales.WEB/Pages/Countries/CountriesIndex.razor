@using Sales.WEB.Repositories
@using Sales.Shared.Entities
@using Sales.WEB.Layout
@using Sales.WEB.Repositories

@page "/countries"
@inject IRepository Repository

@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;

<h3>Paises</h3>
<a class="btn btn-primary" href="/countries/create">Nuevo Pais</a>

<GenericList MyList="Countries">
	<Loading>
		<div class="align-items-center">
			<img src="https://media.tenor.com/RVvnVPK-6dcAAAAM/reload-cat.gif" />
		</div>
	</Loading>
	<Body>
		<table class="table table-striped">
			<thead>
				<tr>
					<th></th>
					<th>País</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var country in Countries!)
				{
					<tr>
						<td>
							<a class="btn btn-warning" href="/countries/edit/@country.Id" >Editar</a>
							<button class="btn btn-danger" @onclick=@(()=> DeleteAsync(country.Id))>Borrar</button>
						</td>
						<td>

							@country.Name
						</td>
					</tr>
				}
			</tbody>
		</table>
	</Body>

</GenericList>



@code {
	public IList<Country>? Countries { get; set; }

	protected async override Task OnInitializedAsync()
	{
		await LoadAsync();
	}

	private async Task LoadAsync()
	{
		var responseHppt = await Repository.Get<List<Country>>("api/countries");
		Countries = responseHppt.Response!;
	}

	private async Task DeleteAsync(int Id)
	{
		var result = await sweetAlertService.FireAsync(new SweetAlertOptions
			{
				Title = "Confirmacion",
				Text = "Desea eliminar el registro?",
				Icon = SweetAlertIcon.Warning,
				ShowCancelButton = true,
				CancelButtonText = "Si",
				ConfirmButtonText = "No",
			});

		var confirm = !string.IsNullOrEmpty(result.Value);
		if (confirm)
		{
			return; //Desa salir al usuario sin guardar cambios
		}
		var responseHttp = await Repository.Delete($"/api/countries/{Id}");
		if (responseHttp.Error)
		{
			if(responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
			{
				var message = await responseHttp.GetErrorMessageAsync();
				await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
				return;
			}
		}
		await LoadAsync();
	}
}

